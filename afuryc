#!/usr/bin/mksh
#   Script by Ypnose  <linuxien[AT]legtux[DOT]org>
#   Inspired by afur-makepkg wrote by Tuxce
#
#   Upload packages on Archlinux.fr private FTP.
#   It just needs curl and makepkg, nothing more.
#
#   Copyright (C) 2013 Ypnose
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#  
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#  
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
#   MA 02110-1301, USA.
#

#set -x

SOFT="${0##*/}"
FOLD="${XDG_CONFIG_HOME:-$HOME/.config}"
FOLCF="${FOLD}/afuryc.conf"
COMPILE=1
UPLFTP=1
CLEAN=0
TMP=0

function usage {
	cat <<- EOF
	usage: $SOFT [-bcdehptuvV]
	options:
	   -b        Create packages without upload
	   -c        Edit config file
	   -d        Clean existing src/ and pkg/ directories
	   -e        Edit PKGBUILD (fallback option)
	   -h        Show help and exit
	   -p        Edit PKGBUILD
	   -t        Build packages on /tmp
	   -u        Only upload packages to FTP
	   -v        curl with verbose output (useful for debugging)
	   -V        Print version
	$SOFT compiles packages and upload them to Archlinux.fr FTP.
	EOF
}

function version {
	cat <<- EOF
	         __                       
	   ____ / _|_   _ _ __ _   _  ___ 
	  / _  | |_| | | | '__| | | |/ __|   $SOFT: Upload your packages to Archlinux.fr FTP.
	 | (_| |  _| |_| | |  | |_| | (__    This program is under GNU General Public License version 2
	  \__,_|_|  \__,_|_|   \__, |\___|
	                       |___/
	EOF
}

function filechk {
	if [[ ! -r $HOME/.afuryc.conf && ! -r $FOLCF ]]; then
		print -u2 "Config file not found."
		print -u2 "You should create a config file similar to afuryc.conf.example"
		exit 1
	elif
		[[ -r $HOME/.afuryc.conf && -r $FOLCF ]]; then
		print -u2 "Conflicts: 2 config files found. Remove one file"
		exit 1
	fi
}

function checkconf {
	filechk
	if [[ -r $HOME/.afuryc.conf ]]; then
		. $HOME/.afuryc.conf
		CONFGS="$HOME/.afuryc.conf"
	elif [[ -r $FOLCF ]]; then
		. $FOLCF
		CONFGS="$FOLCF"
	fi

	#Tiny portable hack 
	CHKFILE=$(find ${CONFGS%/*} -type f ! -perm 600 -iname "afuryc.conf")
	if [[ -n $CHKFILE ]]; then
		print "\e[0;31mWARNING: You should change ${CONFGS##*/} permissions to 600!\e[0m"
	fi
}

function checkvar {
	if [[ -z $USERF ]]; then
		print -u2 "\e[0;31m${CONFGS##*/}:" '$USERF is empty!\e[0m'
		exit 1
	fi
	if [[ -z $PASSF ]]; then
		print -u2 "\e[0;31m${CONFGS##*/}:" '$PASSF is empty!\e[0m'
		exit 1
	fi
	if [[ -z $FTPURL ]]; then
		print -u2 "\e[0;31m${CONFGS##*/}:" '$FTPURL is empty!\e[0m'
		exit 1
	fi
}

function changeconf {
	if [[ -n $EDITOR ]]; then
		"$EDITOR" "$CONFGS"
		print "Configs edited!"
	else
		print -u2 '$EDITOR is not defined'
		exit 1
	fi
}

function testpkgb {
	if [[ ! -r PKGBUILD ]]; then
		print -u2 "PKGBUILD doesn't exist!"
		exit 1
	fi
}

function build {
	testpkgb
	if (( TMP == 0 )); then
		print "\e[1;36m>> Creating package\e[0m"
		if [[ -n $PACKAGER ]]; then
			PACKAGER="$PACKAGER" makepkg
		else
			makepkg
		fi
		print "\e[1;36m>> Creating source tarball\e[0m"
		makepkg --source
		if (( $? == 0 )); then
			print "\e[0;33m>> The packages will be stored in $PWD\e[0m"
		fi
	else
		TMPDIR=$(mktemp -d)
		print "\e[1;36m>> Creating package\e[0m"
		if [[ -n $PACKAGER ]]; then
			PACKAGER="$PACKAGER" SRCDEST="$TMPDIR" BUILDDIR="$TMPDIR" PKGDEST="$TMPDIR" makepkg
		else
			SRCDEST="$TMPDIR" BUILDDIR="$TMPDIR" PKGDEST="$TMPDIR" makepkg
		fi
		print "\e[1;36m>> Creating source tarball\e[0m"
		SRCDEST="$TMPDIR" SRCPKGDEST="$TMPDIR" makepkg --source
		if (( $? == 0 )); then
			print "\e[0;33m>> The package will be stored in $TMPDIR\e[0m"
		fi
	fi
}

function cleanbuild {
	if [[ -d src || -d pkg ]]; then
	while true; do
		print "Do you want to delete src/ &/or pkg/ folders? [Y/n] "
		read ask
		case $ask in
			[Yy])
			  print "\e[0;31mDeleting existing src/ and/or pkg/ folder!\e[0m"
			  rm -r src pkg
			  break
			  ;;
			[Nn])
			  break
			  ;;
			*)
			  print "Please answer yes or no!"
			  ;;
		esac
	done
	else
		print -u2 "The directories src/ & pkg/ are missing!"
	fi
}

function edit {
	testpkgb
	if [[ -n $EDITOR ]]; then
		"$EDITOR" PKGBUILD
		print "PKGBUILD edit finished."
	else
		print -u2 '$EDITOR is not defined'
		exit 1
	fi
}

function upload {
	checkvar
	PKGF="$(find $PWD -follow -maxdepth 1 -type f -iname "*.pkg.tar.xz")"
	TARB="$(find $PWD -follow -maxdepth 1 -type f -iname "*.src.tar.gz")"
	if [[ -z $PKGF && -z $TARB ]]; then
		print -u2 "Nothing to upload!"
		exit 1
	fi
	print "\e[0;33m>> The following packages will be uploaded:\e[0m"
	[[ -n $PKGF ]] && print "   $PKGF"
	[[ -n $TARB ]] && print "   $TARB"
	print "\e[1;32m>> Current FTP:\e[0m $FTPURL"
	print "\e[1;36m>> Uploading packages in 5 seconds...\e[0m"
	sleep 5

	# If curl >= 7.32, the command "curl --progress-bar doesn't work. The upload is too fast, the bar isn't displayed."
	# curl --progress-bar ${CMDAR:+"$CMDAR"} -u ${USERF}:${PASSF} -T "{${PKGF:+"$PKGF"}${TARB:+,"$TARB"}}" "$FTPURL"
	curl -Ss ${CMDAR:+"$CMDAR"} -u ${USERF}:${PASSF} -T "{${PKGF:+"$PKGF"}${TARB:+,"$TARB"}}" "$FTPURL"
	RET="$?"
	if (( RET == 0 )); then
		print "\e[0;32m>> Upload successful!\e[0m"
	else
		print -u2 "\e[0;31mError during upload: Errno $RET\e[0m"
	fi
}

if [[ $1 = "-help" ]]; then
	usage
	exit 0
fi

while getopts ":bcdehptuvV" opt; do
	case $opt in 
		b)
		  UPLFTP=0
		  ;;
		c)
		  checkconf
		  changeconf
		  exit 0
		  ;;
		d)
		  CLEAN=1
		  ;;
		e|p)
		  edit
		  exit 0
		  ;;
		h)
		  usage
		  exit 0
		  ;;
		l)
		  LOG=1
		  ;;
		t)
		  TMP=1
		  ;;
		u)
		  checkconf
		  COMPILE=0
		  ;;
		v)
		  CMDAR="-v"
		  ;;
		V)
		  version
		  exit 0
		  ;;
		:)
		  print "NEEDARG"
		  exit 1
		  ;;
		?)
		  print "$SOFT: This option is invalid -$OPTARG"
		  exit 1
		  ;;
	esac
done

if (( CLEAN != 0 )); then
	cleanbuild
fi

if (( COMPILE != 0 )); then
	checkconf
	build
fi

if (( UPLFTP != 0 )); then
	upload
fi

exit 0
