#!/bin/mksh
#   Script by Ypnose  <linuxien[AT]legtux[DOT]org>
#   Inspired by afur-makepkg wrote by Tuxce
#
#   Upload packages on Archlinux.fr private FTP.
#   It just needs curl and makepkg, nothing more.
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#  
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#  
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
#   MA 02110-1301, USA.
#

#set -x

SOFT="${0##*/}"
VERS="1.0.1"
CMD="curl"
#GNU stat isn't POSIX. awk is enough powerful.
CHKFILE="$(ls -l $FILOC | awk '{k=0;for(i=0;i<=8;i++)k+=((substr($1,i+2,1)~/[rwx]/)*2^(8-i));if(k)printf("%0o\n",k)}')"
COMPILE=1
UPLFTP=1
CLEAN=0
LOG=0

function usage {
    print "usage: $SOFT"
    print "options:"
    print "    -c        Create packages without upload"
    print "    -d        Clean existing src/ and pkg/ directories"
    print "    -e        Edit PKGBUILD"
    print "    -h        Show help and exit"
    print "    -r        Edit config file"
    print "    -u        Only upload packages to FTP"
    print "    -v        curl with verbose output (useful for debugging)"
    print "    -V        Print version"
    print "$SOFT compiles packages and upload them to Archlinux.fr FTP."
    print
}

function version {
    print "         __                       "
    print "   __ _ / _|_   _ _ __ _   _  ___ "
    print "  / _  | |_| | | | '__| | | |/ __|" "  $SOFT" "$VERS"
    print " | (_| |  _| |_| | |  | |_| | (__ " "  Upload your packages to Archlinux.fr FTP."
    print "  \__,_|_|  \__,_|_|   \__, |\___|" "  This program is under GNU General Public License version 2"
    print "                       |___/  "
    print
}

function filechk {
    if [[ ! -r $HOME/.afuryc.conf && ! -r $HOME/.config/afuryc.conf ]]; then
        print "Config file not found. You should create a config file similar to afury.conf.example"
        print "Exiting"
        exit 1
    fi
}

function checkconf {
    filechk
    if [[ -r $HOME/.afuryc.conf ]]; then
        . $HOME/.afuryc.conf
        FILOC="$HOME/.afuryc.conf"
        if (( $CHKFILE != 600 )); then
            print "CARE!"
        fi
    elif [[ -r $HOME/.config/afuryc.conf ]]; then
        . $HOME/.config/afuryc.conf
        FILOC="$HOME/.config/afuryc.conf"
        CHKFILE="$(ls -l $FILOC | awk '{k=0;for(i=0;i<=8;i++)k+=((substr($1,i+2,1)~/[rwx]/)*2^(8-i));if(k)printf("%0o\n",k)}')"
        if (( $CHKFILE != 644 )); then
            print "You should change afuryc permissions to 600!"
        fi
    fi
}

function changeconf {
    if [[ -z $EDITOR ]]; then
        print '$EDITOR is not defined'
        exit 1
    fi
    filechk
    if [[ -r $HOME/.afuryc.conf ]]; then
        $EDITOR $HOME/.afuryc.conf
    elif [[ -r $HOME/.config/afuryc.conf ]]; then
        $EDITOR $HOME/.config/afuryc.conf
    fi
    print "Configs modified!"
}

function build {
    if [[ -n $PKGDEST ]]; then
        if [[ -n $PACKAGER ]]; then
            PKGDEST=$PKGDEST PACKAGER=$PACKAGER makepkg
            print "\e[0;33mThe package will be stored in $PKGDEST\e[0m"
        else
            PKGDEST=$PKGDEST makepkg
            print "\e[0;33mThe package will be stored in $PKGDEST\e[0m"
        fi
    elif [[ -z $PKGDEST ]]; then
        if [[ -n $PACKAGER ]]; then
            PACKAGER=$PACKAGER makepkg
            print "\e[0;33mThe package will be stored in $PWD\e[0m"
        else
            makepkg
            print "\e[0;33mThe package will be stored in $PWD\e[0m"
        fi
    fi

    #for file in find $PWD -type f -name "*src.tar.gz"
        #do
            #mv file >> 
    #done
}

function cleanbuild {
    if [[ -d src || -d pkg ]]; then
    while true; do
        print "Do you want to delete src/ &/or pkg/ folders? [Y/n] "
        read ask
        case $ask in
            [Yy])
              print "\e[0;31mDeleting existing src/ and/or pkg/ folder!\e[0m"
              rm -r src pkg
              break
              ;;
            [Nn])
              break
              ;;
            *)
              print "Please answer yes or no!"
              ;;
        esac
    done
    else
        print "The directories are missing!"
    fi
}

function edit {
    if [[ -n $EDITOR ]]; then
        if [[ -r PKGBUILD ]]; then
            $EDITOR PKGBUILD
            print "PKGBUILD edit finished."
        else
            print "PKGBUILD doesn't exist"
        fi
    else
        print '$EDITOR is not defined'
    fi
}

function upload {
    checkconf
    print "The following packages will be uploaded:"
    for pkg in $(find $PWD -type f -name "*src.tar.gz")
        do
            print "\e[0;32m$src\e[0m\n"
    done
    print "Uploading packages in 5 seconds..."
    sleep 5
    for uppkg in $(find $PWD -type f -name "*src.tar.gz")
        do
            $CMD -u \"$USERF\":\"$PASSF\" -T "$uppkg" "$FTPURL"
    done
}

while getopts ":cdehlrtuvV" opt; do
    case $opt in 
        c)
          UPLFTP=0
          ;;
        d)
          CLEAN=1
          ;;
        e)
          edit
          exit 0
          ;;
        h|help)
          usage
          exit 0
          ;;
        l)
          LOG=1
          ;;
        r)
          changeconf
          exit 0
          ;;
        t)
          checkconf
          exit 0
          ;;
        u)
          COMPILE=0
          ;;
        v)
          CMD="curl -v"
          ;;
        V)
          version
          exit 0
          ;;
        :)
          print "NEEDARG"
          exit 1
          ;;
        ?)
          print "$SOFT: This option is invalid -$OPTARG"
          exit 1
          ;;
    esac
done

if (( $CLEAN != 0 )); then
    cleanbuild
fi

if (( $COMPILE != 0 )); then
    checkconf
    build
fi

if (( $UPLFTP != 0 )); then
    upload
fi

exit 0





